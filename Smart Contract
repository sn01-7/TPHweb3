// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {PriceConverter} from "./PriceConverter.sol";

contract FundMe{
    using PriceConverter for uint256;

    uint256 public minimumUSD = 5e18 ; //5 * (10 ** 18);

    address[] public funders;
    mapping(address funder => uint256 amountFunded) public addressToAmountFunded; 
    //*uint256 public myValue = 1 ;

    address public owner;

    constructor() {
        owner = msg.sender;
    }
    function fund() public payable {
        require (msg.value.getConversionRate() >= minimumUSD, "didn't send enough ETH");
        funders.push(msg.sender);
        //addressToAmountFunded[msg.sender] = addressToAmountFunded[msg.sender] + msg.value;
        addressToAmountFunded[msg.sender] += msg.value;
    }
    function withdraw() public onlyOwner {
        for (uint256 funderIndex; funderIndex < funders.length; funderIndex++){//funderIndex = funderIndex + 1;)
            address funder = funders[funderIndex];
            addressToAmountFunded[funder] = 0;
        }  

        funders = new address [](0);
        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}("");
        require(callSuccess, "Call failed");
    }
    modifier onlyOwner(){
        require(msg.sender == owner, "must be owner!");
        _;
    }
}
